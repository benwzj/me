<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://benwzj.github.io/me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/me/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-09-21T02:51:04+00:00</updated><id>https://benwzj.github.io/me/feed.xml</id><title type="html">About BEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">What Markdown can do</title><link href="https://benwzj.github.io/me/blog/2023/Markdown/" rel="alternate" type="text/html" title="What Markdown can do"/><published>2023-09-20T00:00:00+00:00</published><updated>2023-09-20T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/Markdown</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/Markdown/"><![CDATA[<p>Markdown Language can do everything, and good for human reading.</p> <h2 id="it-can-embad-html-tags">It can embad HTML tags</h2> <h4 id="direct-link">Direct link:</h4> <p><a href="https://en.wikipedia.org/">wikipedia</a></p> <h4 id="make-a-list">Make a list</h4> <ul> <li>Milk</li> <li>Bread</li> <li>Yogurt</li> <li>Nappy</li> </ul> <hr/> <h4 id="we-can-quote">We can Quote:</h4> <blockquote> We do not grow absolutely, chronologically. We grow sometimes in one dimension, and not in another, unevenly. We grow partially. We are relative. We are mature in one realm, childish in another. —Anais Nin </blockquote> <h4 id="support-images">Support Images:</h4> <figure> <picture> <img src="/me/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>responsive format:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/me/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/me/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="display-programm-code">Display programm code</h2> <h4 id="you-have-to-do-is-wrap-your-code-in-markdown-code-tags">You have to do is wrap your code in markdown code tags:</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">c++
</span><span class="n">code</span> <span class="n">code</span> <span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="display-line-number">Display line number</h4> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <h4 id="display-liquid-template-code-too">Display liquid template code too</h4> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <h4 id="support-mathjax">Support Mathjax</h4> <p>You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. Example: \(E = mc^2\).</p> <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <h2 id="adding-disqus-comments">Adding DISQUS comments.</h2> <p>Turn <code class="language-plaintext highlighter-rouge">disqus_comments: true</code> on at the Front Matter.</p> <h2 id="adding-table-of-contents">Adding table of contents</h2> <p>To add a table of contents to a post, add</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">beginning</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">toc</span><span class="pi">:</span>
  <span class="na">sidebar</span><span class="pi">:</span> <span class="s">left</span>
</code></pre></div></div> <p>to the front matter of the post. The table of contents will be automatically generated from the headings in the post.</p> <h2 id="customized-blockquotes">customized blockquotes</h2> <p>Like below:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="redirecting-to-another-page">Redirecting to another page</h2> <p>Add below in the front matter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redirect: /assets/pdf/example_pdf.pdf
</code></pre></div></div> <h2 id="display-tables-bootstrap-tables">Display tables Bootstrap Tables</h2> <p>Using markdown to display tables is easy. Just use the following syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       | center 1       | right 1       |
| Left 2       | center 2       | right 2       |
| Left 3       | center 3       | right 3       |
</code></pre></div></div> <p>That will generate:</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="video">Video</h2> <h4 id="it-supports-local-video-files">It supports local video files.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/me/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/me/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <h4 id="it-does-also-support-embedding-videos-from-different-sources">It does also support embedding videos from different sources.</h4> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h2 id="audio">Audio</h2> <p>It supports local and external audio files.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/me/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div>]]></content><author><name></name></author><category term="HTML"/><category term="markdown"/><category term="MD"/><summary type="html"><![CDATA[Markdown Language can do everything, and good for human reading.]]></summary></entry><entry><title type="html">Introduce Liquid Template</title><link href="https://benwzj.github.io/me/blog/2023/Liquid-template/" rel="alternate" type="text/html" title="Introduce Liquid Template"/><published>2023-09-19T00:00:00+00:00</published><updated>2023-09-19T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/Liquid%20template</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/Liquid-template/"><![CDATA[<h2 id="what-is-liquid">What is Liquid</h2> <p>Liquid is an open-source template language integrated. It can be used to add dynamic content to webpages, and to create a wide variety of custom web templates.</p> <p>Liquid uses a combination of <strong>objects</strong>, <strong>tags</strong>, and <strong>filters</strong> inside template files to display dynamic content.</p> <p>It use fileters a lot, for example, using filter to get size of array.</p> <h2 id="what-is-object">What is object</h2> <p>Objects contain the content that Liquid displays on a page. Objects and variables are displayed when enclosed in double curly braces: <code class="language-plaintext highlighter-rouge">{ {</code> and <code class="language-plaintext highlighter-rouge">} }</code>.</p> <p>Liquid objects can be one of six types:</p> <ul> <li>String</li> <li>Number</li> <li>Boolean</li> <li>Nil</li> <li>Array</li> <li>EmptyDrop</li> </ul> <p>You can initialize Liquid variables using assign or capture tags.</p> <h2 id="what-is-tag">What is tag</h2> <p>Tags create the logic and control flow for templates. The curly brace percentage delimiters <code class="language-plaintext highlighter-rouge">{ %</code> and <code class="language-plaintext highlighter-rouge">% }</code> and the text that they surround do not produce any visible output when the template is rendered. This lets you assign variables and create conditions or loops without showing any of the Liquid logic on the page.</p> <h2 id="what-is-filter">What is filter</h2> <p>Filters change the output of a Liquid object or variable. They are used within double curly braces <code class="language-plaintext highlighter-rouge">{ { } }</code> and variable assignment, and are separated by a pipe character <code class="language-plaintext highlighter-rouge">|</code>.</p> <h2 id="arrays-in-liquid">ARRAYS IN LIQUID</h2> <p>The first element of an array is accessed with an index of 0.</p> <p>Always use the “split” filter when you create an array in Liquid or else you’ll not create an array but rather a string.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ %- assign example_array =  "value1, value2, value3" | split: ", " -% }

</code></pre></div></div> <ul> <li>Use COMPACT filter to compact an array,</li> <li>Use CONCAT filter to concatenate two arrays.</li> <li>Use FIRST filter to return the first item in an array.</li> <li>Use JOIN filter to combine all of the items in an array into a single string, separated by a space.</li> <li>Use LAST filter to return the last item in an array.</li> <li>Use the MAP filter to create a new array that contains only the specific string and store them in a new array.</li> <li>Use REVERSE filter to reverse the order of the items in an array.</li> <li>Use SIZE filter to return the size of an array.</li> <li>Use SORT filter to sort the items in an array in case-sensitive alphabetical or numerical order.</li> <li>Use SORT NATURAL filter to sort the items in an array in case-insensitive alphabetical order.</li> <li>Use SUM filter to sum all array values and returns the result.</li> </ul>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="Template"/><summary type="html"><![CDATA[What is Liquid]]></summary></entry><entry><title type="html">Introduce MathJax</title><link href="https://benwzj.github.io/me/blog/2023/Mathjax/" rel="alternate" type="text/html" title="Introduce MathJax"/><published>2023-09-14T00:00:00+00:00</published><updated>2023-09-14T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/Mathjax</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/Mathjax/"><![CDATA[<h2 id="what-is-mathjax">What is MathJax</h2> <ul> <li>MathJax is a cross-browser JavaScript library</li> <li>MathJax displays <strong>mathematical notation</strong> in web browsers</li> <li>MathJax uses CSS with web fonts or SVG, instead of bitmap images or Flash</li> <li>MathJax using MathML, LaTeX and ASCIIMathML markup</li> <li>MathJax is highly modular on input and output. Use MathML, TeX, and ASCIImath as input and produce HTML+CSS, SVG, or MathML as output</li> <li>MathJax works with screenreaders &amp; provides expression zoom and interactive exploration. You also can copy equations into Office, LaTeX, wikis, and other software.</li> </ul> <h2 id="what-is-mjx-container">What is mjx-container?</h2> <p>mjx-container is specific style class for MathJax content.</p> <h3 id="example">Example</h3> <p>This will also provide display-mode math with scroll bars if they are too long. If you want to do this only for inline math, then use mjx-container:not([display]) instead.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style&gt;</span>
<span class="nt">mjx-container</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="n">inline-grid</span><span class="p">;</span>
  <span class="nl">overflow-x</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span>
  <span class="nl">overflow-y</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">max-width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;div</span> <span class="na">style=</span><span class="s">"width:15em; border: 1px solid; padding: 3px 5px"</span><span class="nt">&gt;</span>
This is some text with a long in-line math expression
\(a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\)
that we hope will have a scroll bar!  This math \(x+y+z\) should not.
Long display math also gets a scroll bar:
\[a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w+x+y+z\]
<span class="nt">&lt;/div&gt;</span>

</code></pre></div></div> <p>just test, make git action is working</p>]]></content><author><name></name></author><category term="HTML"/><category term="MathJax"/><category term="SVG"/><summary type="html"><![CDATA[What is MathJax]]></summary></entry><entry><title type="html">Build your own personal brand</title><link href="https://benwzj.github.io/me/blog/2023/BuildPersonalBrand/" rel="alternate" type="text/html" title="Build your own personal brand"/><published>2023-08-31T00:00:00+00:00</published><updated>2023-08-31T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/BuildPersonalBrand</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/BuildPersonalBrand/"><![CDATA[<p>Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!</p> <p>What is your persoanl brand? <strong><em>It is your reputation!</em></strong></p> <p>How to build your personal brand? I believe the following advices is good one.</p> <h2 id="1-figure-out-your-goal">#1 Figure out your goal.</h2> <p>What do you want your personal brand to help you accomplish? Are you change job, or transition into a new industry? No matter what it is, Write it down, make it specific so that you are working toward to a clear outcome.</p> <h2 id="2-get-clear-on-what-you-want-to-be-known-for">#2 Get Clear on What you want to be known for.</h2> <p>In another word, How do you want other people to describe you as a professional. No matter what type your professional is, What you need to do is dig deep on What, How and Why behind your work! So that you can make it concrete and <strong>easy to remember</strong>. Just make sure no confusion. Try to think about this:</p> <ul> <li>What are the things that make you unique?</li> <li>Are there specific talents and expertise you’ve acquired?</li> <li>What do you know more about than most people.</li> </ul> <p>Sit down and make a list!</p> <h2 id="3-know-your-audience">#3 Know your Audience.</h2> <p>Who you want to share your personal brand with? <strong>The reality is, your personal brand is not about you! It is about the people you want to educate with the skills, knowledge and value you provide.</strong></p> <p>Who you want to focus on should be based on two things:</p> <ul> <li>The goal of your personal brand and</li> <li>The people who can best benefit from your skills.</li> </ul> <p>Answer this questions:</p> <ul> <li>Who can most gain benefit from your share? and</li> <li>How exactly can you see yourself helping them?</li> </ul> <h2 id="4-creat-a-misson-statement">#4 Creat a Misson statement</h2> <p>Let’s pull all your answers into a <strong>single</strong> mission statement that describe:</p> <ul> <li>Who you are</li> <li>What you do</li> <li>Who you do it for</li> <li>The transformation you create</li> </ul> <p>Let’s make a concrete example (Project manager):</p> <blockquote> <p>My name is Jennifer, I’m a project manager for a sustainable fashion company. I work with teams across different deparments to plan, organize and direct Annovative marketing campaigns that engage customers while also increasing brand loyalty.</p> </blockquote> <p>The mission statement can be very different, depending on your career. But no matter what is it, <strong>Write it down and put it somewhere prominent.</strong> You can use it to make decision about how you speak about yourself when you first meet someone, or to the communities you want to share it with.</p> <h2 id="5-build-your-personal-brand-online">#5 Build your personal brand online</h2> <p>There are two ways to do this online: your own website, and social media.</p> <ul> <li>Website is very professional!</li> <li>Don’t choose too many social media!</li> </ul>]]></content><author><name></name></author><category term="Personal"/><category term="personal"/><category term="career"/><category term="professional"/><summary type="html"><![CDATA[Today I watched a TED talk about 5 steps to build your own personal brand. I just want to mark it down here!]]></summary></entry><entry><title type="html">Iterable Iterator concept in Python</title><link href="https://benwzj.github.io/me/blog/2023/Iterable,-Iterator-concept-in-Python/" rel="alternate" type="text/html" title="Iterable Iterator concept in Python"/><published>2023-05-13T00:00:00+00:00</published><updated>2023-05-13T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/Iterable,%20Iterator%20concept%20in%20Python</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/Iterable,-Iterator-concept-in-Python/"><![CDATA[<p><strong>In short:</strong> Iterbale support <strong>iter</strong>, and maintain the data. Iterator support <strong>next</strong>, and reach the data.</p> <h1 id="iterable">Iterable</h1> <h2 id="official-defination">Official defination</h2> <p>Any object that supports <em>iter()</em> and return iterator is said to be “iterable.” example:</p> <ul> <li>list, str, and tuple are classical example of iterables</li> <li>Some non-sequence types like dict, file objects are iterables.</li> <li>Objects of any classes you define with an <strong>iter</strong>() method or with a <strong>getitem</strong>() method that implements sequence semantics are iterables.</li> </ul> <p>Iterables can be used in a for loop and in many other places where a sequence is needed.<br/> built-in function iter(), it returns an iterator for the object.</p> <h1 id="iterator">Iterator</h1> <h2 id="official-definition">Official definition</h2> <p>The iterator objects themselves are required to support the following two methods, which together form the iterator protocol: iterator.<strong>iter</strong>() return itself. iterator.<strong>next</strong>() return one data and maintain state.</p> <p><strong>But CPython doesn’t consistently apply</strong></p> <h1 id="iterable-vs-iterator">Iterable vs. Iterator</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
<span class="n">i_lst</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <ul> <li>lst is iterable, but not iterator.</li> <li>i_lst is iterator and also iterable. i_lst is list_iterator object</li> </ul> <p>An iterable can returns a <strong>fresh</strong> ITERATOR. An iterator can return itself. And iterator also is an object with a <strong>next</strong> method that returns the next value in the iteration and updates the state to point at the next value</p> <h1 id="pure-iterables">Pure iterables</h1> <p>Maybe we can produce a pure iterable concept. Pure iterable typically hold the data itself, and return fresh iterator. In contrast, iterator is not pure iterable that fetch data and return itself.</p> <h1 id="conclusion">Conclusion</h1> <p>Many people say iterators are iterables as well, and iterables don’t have to be iterators. But they also say iterators and iterables are different, like iterators are more effecient in memory consumsion. That is confusing concept. I reckon iterator don’t have to support <strong>iter</strong>(). That means iterator don’t have to be iterable. Just like JavaScript.</p>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[In short: Iterbale support iter, and maintain the data. Iterator support next, and reach the data.]]></summary></entry><entry><title type="html">How for loop iterate an iterable in Python</title><link href="https://benwzj.github.io/me/blog/2023/How-for-loop-iterate-an-iterable-in-Python/" rel="alternate" type="text/html" title="How for loop iterate an iterable in Python"/><published>2023-05-12T00:00:00+00:00</published><updated>2023-05-12T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2023/How%20for%20loop%20iterate%20an%20iterable%20in%20Python</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2023/How-for-loop-iterate-an-iterable-in-Python/"><![CDATA[<p><strong>In short:</strong> it is a lazy processing.</p> <p>I am going to make two example to display how <em>for…in</em> loop work underneath the cover.<br/> First one is loop over a enumerate object, and second one is loop over a range object. Both of them will modify the list inside the loop.</p> <h1 id="first-example">First example:</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
</code></pre></div></div> <p><strong>There are No error raising for these codes, but they are not work as expected.</strong></p> <p>The code print below:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1, 3, 5, 7, 9]
</code></pre></div></div> <p>enumerate object is generator object which will yield value from <em>lst</em>. It is lazy process. When <em>lst</em> change, <em>value</em> from enumerate object change as well, but <em>i</em> is keep going.</p> <p><strong>for…in is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_iter</span> <span class="o">=</span> <span class="nf">iter</span><span class="p">(</span><span class="n">enumerate_obj</span><span class="p">)</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
 <span class="k">try</span><span class="p">:</span>
   <span class="n">x</span> <span class="o">=</span> <span class="n">_iter</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>
 <span class="k">except</span> <span class="nb">StopIteration</span><span class="p">:</span>
   <span class="k">break</span>
 <span class="c1"># statements
</span></code></pre></div></div> <p><strong>enumerate() is equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lst</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div> <h1 id="second-example">Second example:</h1> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lst</span><span class="p">)):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p><strong>This code will raise IndexError</strong></p> <p><em>range()</em> is iterable, but <em>len(lst)</em>, the parameter of <em>range()</em>, have been replace with constant value 10. Because <em>len(lst)</em> is not a lazy process. It don’t change any more. So <em>i</em> will up to 9.</p> <p><strong>The codes are equivalent to:</strong></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">9</span><span class="p">):</span>
   <span class="n">lst</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Python"/><summary type="html"><![CDATA[In short: it is a lazy processing.]]></summary></entry><entry><title type="html">About SVG image format</title><link href="https://benwzj.github.io/me/blog/2020/svg/" rel="alternate" type="text/html" title="About SVG image format"/><published>2020-10-10T00:00:00+00:00</published><updated>2020-10-10T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/svg</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/svg/"><![CDATA[<h2 id="what-is-svg">What is SVG</h2> <p>Scalable Vector Graphics (SVG) is an XML-based vector image format for defining two-dimensional graphics, having support for interactivity and animation.</p> <p>An SVG file is a standard graphics file type used for rendering images on the internet.</p> <p>SVG is vector graphic, which means it is different from raster graphic like JPG, PNG. PDF is vector graphic as well. SVG and PDF work in similar way.</p> <p>The following code will create a image:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width:1rem;height:1rem;fill:currentColor"&gt;
  &lt;g data-name="Layer 2"&gt;&lt;g data-name="external-link"&gt;
    &lt;rect width="24" height="24" opacity="0"&gt;&lt;/rect&gt;
    &lt;path d="M20 11a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h6a1 1 0 0 0 0-2H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1z"&gt;&lt;/path&gt;
    &lt;path d="M16 5h1.58l-6.29 6.28a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L19 6.42V8a1 1 0 0 0 1 1 1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-4a1 1 0 0 0 0 2z"&gt;&lt;/path&gt;
  &lt;/g&gt;&lt;/g&gt;
&lt;/svg&gt;

</code></pre></div></div> <p>This image looks like below:</p> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width:1rem;height:1rem;fill:currentColor"> <g data-name="Layer 2"><g data-name="external-link"> <rect width="24" height="24" opacity="0"></rect> <path d="M20 11a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h6a1 1 0 0 0 0-2H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1z"></path> <path d="M16 5h1.58l-6.29 6.28a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L19 6.42V8a1 1 0 0 0 1 1 1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-4a1 1 0 0 0 0 2z"></path> </g></g> </svg> <p><br/></p> <p>Most browsers are designed to render, interpret, and display SVG files. To open a .svg file, launch your browser, then open the file and it will show in your browser</p> <h2 id="svg-features">SVG Features</h2> <figure> <picture> <img src="/me/assets/img/Bitmap_VS_SVG.svg.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li> <p>SVG supports interactivity, animation, and rich graphical capabilities, making it suitable for both web and print applications.</p> </li> <li> <p>SVG allows three types of graphic objects: vector graphic shapes (such as paths consisting of straight lines and curves), bitmap images, and text.</p> </li> <li> <p>SVG also supports metadata, enabling better indexing, searching, and retrieval of SVG content.</p> </li> <li> <p>Though the SVG Specification primarily focuses on vector graphics markup language, its design includes the basic capabilities of a page description language like Adobe’s PDF.</p> </li> <li> <p>Despite its benefits, SVG can pose security risks if used for images, as it can host scripts or CSS, potentially leading to cross-site scripting attacks or other vulnerabilities.</p> </li> </ul> <h2 id="what-are-svg-files-used-for">What are SVG files used for</h2> <p>SVG files work best for images that contain less detail than a photograph</p> <h4 id="icons">Icons</h4> <p>Most icons translate well to vectors, given their simplicity and clearly defined borders. Icons for page elements like buttons will need to be responsive for varying screen sizes, which means they must be perfectly scalable.</p> <h4 id="logos">Logos</h4> <p>The SVG format is particularly well suited for logos, which appear in website headers, emails, and in print on anything from pamphlets to hoodies to billboards. Again, logos tend to be simpler in design, which lends nicely to the SVG format.</p> <h4 id="illustrations">Illustrations</h4> <p>Vectors also suit non-photo visual art nicely. Decorative drawings on webpages can both scale easily and conserve file space if added as SVG files. You can create the illustrations below, even the textures on some shapes, with SVGs.</p> <h4 id="animations-and-interface-elements">Animations and Interface Elements</h4> <p>By harnessing the capabilities of CSS and JavaScript, you can set SVGs to change their appearance dynamically and to trigger automatically during or after an event. Animated SVGs can serve to add visual flair to your pages, or you can use them to engage with user interface animations</p> <h4 id="animations-and-interface-elements-1">Animations and Interface Elements</h4> <p>By harnessing the capabilities of CSS and JavaScript, you can set SVGs to change their appearance dynamically and to trigger automatically during or after an event. Animated SVGs can serve to add visual flair to your pages, or you can use them to engage with user interface animations:</p> <figure> <picture> <img src="/me/assets/img/SVGDemo.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="disadvantages-of-svg-files">Disadvantages of SVG Files</h2> <ol> <li> <p>Not the right format for high-quality or detailed photos. Designers create vector graphics with points and paths, not pixels. So, you can create a vector graphic by tracing a photograph or using a converter to change your photo into an SVG. But your final image won’t look exactly like your photograph.</p> </li> <li> <p>Requires some knowledge of code. SVG is an XML-based scene description language for graphics. Like HTML, SVG is great for people with some engineering know-how.</p> </li> </ol>]]></content><author><name></name></author><category term="HTML"/><category term="SVG"/><category term="Image"/><summary type="html"><![CDATA[What is SVG Scalable Vector Graphics (SVG) is an XML-based vector image format for defining two-dimensional graphics, having support for interactivity and animation.]]></summary></entry><entry><title type="html">SAML Main Points</title><link href="https://benwzj.github.io/me/blog/2020/SAML/" rel="alternate" type="text/html" title="SAML Main Points"/><published>2020-08-30T00:00:00+00:00</published><updated>2020-08-30T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/SAML</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/SAML/"><![CDATA[<h2 id="in-short">In Short</h2> <ul> <li> <p>Security Assertion Markup Language (SAML) 2.0 is an open standard for exchanging <strong>authentication</strong> and <strong>authorization</strong> data between parties, in particular, between an identity provider(IdP) and a service provider(SP).</p> </li> <li> <p>SAML focus on <strong>SSO</strong>: IdP-initiated SSO, SP-initiated SSO.</p> </li> <li> <p>SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions).</p> </li> <li> <p>SAML is built upon a number of existing standards: like, XML, XML Schema (XSD), XML Signature, XML Encryption, HTTP, SOAP.</p> </li> <li> <p>SAML start from Jan 2001. It is old.</p> </li> </ul> <h2 id="two-common-usage-scenarios-for-saml">Two common usage scenarios for SAML.</h2> <ul> <li>IdP-initiated SSO(this is not popular one),</li> <li>SP-initiated SSO.</li> </ul> <h1 id="idp-initiated-sso-with-saml-authentication">IdP-initiated SSO with SAML Authentication</h1> <p>In this scenario, users first log in to the IdP system, which presents an application catalog. This catalog will contain visual icons of all the internal and external applications that the company has configured SSO for and that the user has privileges to access. When the user clicks on one of the images, the SAML flow is as follows:</p> <ol> <li>The SAML IdP takes the user’s identity, along with any other attributes that the two sides have agreed to communicate.</li> <li>It builds an XML-based SAML assertion.</li> <li>It signs the assertion with the private key of a public/private keypair that was exchanged between the IdP and SP when the SSO partnership was configured.</li> <li>It then either sends the assertion to the SP via the user’s browser or sends a reference to the assertion that the SP can use to securely retrieve the assertion.</li> </ol> <p>Once the SP has received the SAML assertion, it validates the signature using the public key in order to ensure the SAML assertion really came from its trusted IdP and that none of the values in the assertion have been modified. The SP can then extract the identity of the user from the SAML assertion along with any other attributes it needs. At this point, the user is on the service provider’s landing page, just as though they had logged into the site manually.</p> <h1 id="sp-initiated-sso-with-saml-authentication">SP-initiated SSO with SAML Authentication</h1> <p>SP-initiated SSO starts when a user tries to access a resource at the service provider, but hasn’t yet authenticated to the SP. A user may have gone directly to the website or may have saved a link to a specific resource at the SP. Once the SP sees that the user doesn’t have an active session, it will redirect them to the IdP to be authenticated. The IdP will authenticate the user, create the assertion and redirect the user back to the SP just as in the IdP-initiated use case, with the addition that it will also send back the URL of the resource that the user was initially trying to access, if it was provided by the SP.</p> <p>A few common ways the SP can determine which IDP to redirect the user to are:</p> <ol> <li>The SP may ask the user for their email address and use the domain of the email, such as bill@pingidentity.com, to determine which IdP to use.</li> <li>The SP may display a list of IdPs it supports and ask the user to choose the appropriate one.</li> <li>The resource URL may be specific to one IdP.</li> <li>The SP may have placed a cookie containing IdP information in the user’s browser the first time the user successfully signed on from the IDP and will use this information on subsequent accesses.</li> </ol> <p>Once the SP has received the SAML assertion, it validates the signature using the public key in order to ensure the SAML assertion really came from its trusted IdP and that none of the values in the assertion have been modified. The SP can then extract the identity of the user from the SAML assertion along with any other attributes it needs. At this point, the user is on the service provider’s landing page, just as though they had logged into the site manually.</p>]]></content><author><name></name></author><category term="Auth"/><category term="SAML"/><category term="authentication"/><category term="authorization"/><summary type="html"><![CDATA[In Short]]></summary></entry><entry><title type="html">OAuth vs. OpenID</title><link href="https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID/" rel="alternate" type="text/html" title="OAuth vs. OpenID"/><published>2020-08-27T00:00:00+00:00</published><updated>2020-08-27T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID/"><![CDATA[<ul> <li>OAuth is used in access authorization while OpenID are used in user authentication.</li> </ul> <h2 id="oauth-does-have-in-common-with-openid">OAuth does have in common with OpenID</h2> <ul> <li>They are open web standards.</li> <li>They both celebrate decentralisation.</li> <li>They both involve browser redirects from the website you’re trying to use - the “consumer” website - to a distinct “provider” website, and back again. Meanwhile, those websites talk to each other behind the scenes to verify what just happened.</li> <li>The user can actively manage the provider website</li> </ul> <h2 id="mainly-different-as-in-they-let-you-do-different-things">Mainly different as in “they let you do different things”</h2> <ul> <li>OpenID gives you one login for multiple sites. Each time you need to log into Zooomr - a site using OpenID - you will be redirected to your OpenID site where you login</li> <li> <p>OAuth lets you authorise one website - the consumer - to access your data from another website - the provider. With OAuth, you still need to log in the provider. How the provider decides you’re logged in is completely orthogonal to OAuth. Maybe username, password, even maybe OpenID.</p> </li> <li>With OpenID, there is no suggestion of two web apps sharing your data. Except some profile details. However, this is data of a generic, non-application-specific, nature.</li> <li>With OAuth, any information you hold on any website can be shared with another website. You could share your GMail with a clever consumer that automatically tags items by inspecting the content, if GMail was an OpenAuth consumer.</li> </ul> <h2 id="their-scenario">Their scenario</h2> <h1 id="the-scenario-for-openid">the scenario for OpenID:</h1> <ul> <li>User wants to access his account on example.com</li> <li>example.com (the “Relying Party” in OpenID lingo) asks the user for his OpenID</li> <li>User enters his OpenID</li> <li>example.com redirects the user to his OpenID provider</li> <li>User authenticates himself to the OpenID provider</li> <li>OpenID provider redirects the user back to example.com</li> <li>example.com allows the user to access his account</li> </ul> <h1 id="the-scenario-for-oauth">the scenario for OAuth:</h1> <ul> <li>User is on example.com and wants to import his contacts from mycontacts.com</li> <li>example.com (the “Consumer” in OAuth lingo) redirects the user to mycontacts.com (the “Service Provider”)</li> <li>User authenticates himself to mycontacts.com (which can happen by using OpenID)</li> <li>mycontacts.com asks the user whether he wants to authorize example.com to access his contacts</li> <li>User makes his choice</li> <li>mycontacts.com redirects the user back to example.com</li> <li>example.com retrieves the contacts from mycontacts.com</li> <li>example.com informs the user that the import was successful</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OAuth"/><category term="OpenID"/><category term="authorization"/><category term="authentication"/><summary type="html"><![CDATA[OAuth is used in access authorization while OpenID are used in user authentication.]]></summary></entry><entry><title type="html">OIDC Main Points</title><link href="https://benwzj.github.io/me/blog/2020/OIDC/" rel="alternate" type="text/html" title="OIDC Main Points"/><published>2020-08-24T00:00:00+00:00</published><updated>2020-08-24T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OIDC</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OIDC/"><![CDATA[<h2 id="what-is-oidc">What is OIDC</h2> <ul> <li>OpenID Connect (OIDC) provides an authentication layer atop OAuth 2.0.</li> <li>It simplifies the way to verify the identity of users based on the authentication performed by an Authorization Server and to obtain user profile information in an interoperable and REST-like manner.</li> <li>It enables application and website developers to launch sign-in flows and receive verifiable assertions about users across Web-based, mobile, and JavaScript clients.</li> <li>Simply saying, it adds an additional token called an <strong>ID token</strong>.</li> <li>OpenID Connect also standardizes areas that OAuth 2.0 leaves up to choice, such as scopes, endpoint discovery, and dynamic registration of clients.</li> <li>It addresses the lack of an authentication mechanism in OAuth, which is a weakness when it comes to authorizing sensitive transactions such as payments.</li> <li>OIDC is just a special, simplified case of OAuth, not a replacement. It uses the same terminology and concepts.</li> </ul> <h2 id="flow">Flow</h2> <ul> <li>A typical OpenID Connect workflow involves three parties, namely, the relying party (RP), the end user and the identity provider(IdP). The client, or the Relying Party, sends the end user to the identity provider, where the end user authenticates the identity and authorizes access to the client.</li> <li>The IdP sends an authorization code to the client, which then uses it to request <strong>ID token</strong> and uauslly access token from the IdP. Once the client gets the tokens, it is allowed it to perform an action on behalf of the end user.</li> </ul> <h2 id="caveat">caveat</h2> <ul> <li>OpenID Connect uses a signed and cryptographically verifiable JSON Web Token to ensure that the access and ID tokens are not tampered with during the exchange of information between parties.</li> <li>A client must <strong>be registered with</strong> the OP.</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OIDC"/><category term="authorization"/><category term="authentication"/><summary type="html"><![CDATA[What is OIDC]]></summary></entry></feed>