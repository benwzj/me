<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://benwzj.github.io/me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://benwzj.github.io/me/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-04T23:54:32+00:00</updated><id>https://benwzj.github.io/me/feed.xml</id><title type="html">About BEN</title><subtitle>A website to show the world of Ben Wen </subtitle><entry><title type="html">About SVG image format</title><link href="https://benwzj.github.io/me/blog/2020/svg/" rel="alternate" type="text/html" title="About SVG image format"/><published>2020-10-10T00:00:00+00:00</published><updated>2020-10-10T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/svg</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/svg/"><![CDATA[<h2 id="what-is-svg">What is SVG</h2> <p>Scalable Vector Graphics (SVG) is an XML-based vector image format for defining two-dimensional graphics, having support for interactivity and animation.</p> <p>An SVG file is a standard graphics file type used for rendering images on the internet.</p> <p>SVG is vector graphic, which means it is different from raster graphic like JPG, PNG. PDF is vector graphic as well. SVG and PDF work in similar way.</p> <p>The following code will create a image:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width:1rem;height:1rem;fill:currentColor"&gt;
  &lt;g data-name="Layer 2"&gt;&lt;g data-name="external-link"&gt;
    &lt;rect width="24" height="24" opacity="0"&gt;&lt;/rect&gt;
    &lt;path d="M20 11a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h6a1 1 0 0 0 0-2H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1z"&gt;&lt;/path&gt;
    &lt;path d="M16 5h1.58l-6.29 6.28a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L19 6.42V8a1 1 0 0 0 1 1 1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-4a1 1 0 0 0 0 2z"&gt;&lt;/path&gt;
  &lt;/g&gt;&lt;/g&gt;
&lt;/svg&gt;

</code></pre></div></div> <p>This image looks like below:</p> <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" style="width:1rem;height:1rem;fill:currentColor"> <g data-name="Layer 2"><g data-name="external-link"> <rect width="24" height="24" opacity="0"></rect> <path d="M20 11a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h6a1 1 0 0 0 0-2H6a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3h12a3 3 0 0 0 3-3v-6a1 1 0 0 0-1-1z"></path> <path d="M16 5h1.58l-6.29 6.28a1 1 0 0 0 0 1.42 1 1 0 0 0 1.42 0L19 6.42V8a1 1 0 0 0 1 1 1 1 0 0 0 1-1V4a1 1 0 0 0-1-1h-4a1 1 0 0 0 0 2z"></path> </g></g> </svg> <p><br/></p> <p>Most browsers are designed to render, interpret, and display SVG files. To open a .svg file, launch your browser, then open the file and it will show in your browser</p> <h2 id="svg-features">SVG Features</h2> <figure> <picture> <img src="/me/assets/img/Bitmap_VS_SVG.svg.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li> <p>SVG supports interactivity, animation, and rich graphical capabilities, making it suitable for both web and print applications.</p> </li> <li> <p>SVG allows three types of graphic objects: vector graphic shapes (such as paths consisting of straight lines and curves), bitmap images, and text.</p> </li> <li> <p>SVG also supports metadata, enabling better indexing, searching, and retrieval of SVG content.</p> </li> <li> <p>Though the SVG Specification primarily focuses on vector graphics markup language, its design includes the basic capabilities of a page description language like Adobe’s PDF.</p> </li> <li> <p>Despite its benefits, SVG can pose security risks if used for images, as it can host scripts or CSS, potentially leading to cross-site scripting attacks or other vulnerabilities.</p> </li> </ul> <h2 id="what-are-svg-files-used-for">What are SVG files used for</h2> <p>SVG files work best for images that contain less detail than a photograph</p> <h4 id="icons">Icons</h4> <p>Most icons translate well to vectors, given their simplicity and clearly defined borders. Icons for page elements like buttons will need to be responsive for varying screen sizes, which means they must be perfectly scalable.</p> <h4 id="logos">Logos</h4> <p>The SVG format is particularly well suited for logos, which appear in website headers, emails, and in print on anything from pamphlets to hoodies to billboards. Again, logos tend to be simpler in design, which lends nicely to the SVG format.</p> <h4 id="illustrations">Illustrations</h4> <p>Vectors also suit non-photo visual art nicely. Decorative drawings on webpages can both scale easily and conserve file space if added as SVG files. You can create the illustrations below, even the textures on some shapes, with SVGs.</p> <h4 id="animations-and-interface-elements">Animations and Interface Elements</h4> <p>By harnessing the capabilities of CSS and JavaScript, you can set SVGs to change their appearance dynamically and to trigger automatically during or after an event. Animated SVGs can serve to add visual flair to your pages, or you can use them to engage with user interface animations</p> <h4 id="animations-and-interface-elements-1">Animations and Interface Elements</h4> <p>By harnessing the capabilities of CSS and JavaScript, you can set SVGs to change their appearance dynamically and to trigger automatically during or after an event. Animated SVGs can serve to add visual flair to your pages, or you can use them to engage with user interface animations:</p> <figure> <picture> <img src="/me/assets/img/SVGDemo.gif" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h2 id="disadvantages-of-svg-files">Disadvantages of SVG Files</h2> <ol> <li> <p>Not the right format for high-quality or detailed photos. Designers create vector graphics with points and paths, not pixels. So, you can create a vector graphic by tracing a photograph or using a converter to change your photo into an SVG. But your final image won’t look exactly like your photograph.</p> </li> <li> <p>Requires some knowledge of code. SVG is an XML-based scene description language for graphics. Like HTML, SVG is great for people with some engineering know-how.</p> </li> </ol>]]></content><author><name></name></author><category term="HTML"/><category term="SVG"/><category term="Image"/><summary type="html"><![CDATA[What is SVG Scalable Vector Graphics (SVG) is an XML-based vector image format for defining two-dimensional graphics, having support for interactivity and animation.]]></summary></entry><entry><title type="html">SAML Main Points</title><link href="https://benwzj.github.io/me/blog/2020/SAML/" rel="alternate" type="text/html" title="SAML Main Points"/><published>2020-08-30T00:00:00+00:00</published><updated>2020-08-30T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/SAML</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/SAML/"><![CDATA[<h2 id="in-short">In Short</h2> <ul> <li> <p>Security Assertion Markup Language (SAML) 2.0 is an open standard for exchanging <strong>authentication</strong> and <strong>authorization</strong> data between parties, in particular, between an identity provider(IdP) and a service provider(SP).</p> </li> <li> <p>SAML focus on <strong>SSO</strong>: IdP-initiated SSO, SP-initiated SSO.</p> </li> <li> <p>SAML is an XML-based markup language for security assertions (statements that service providers use to make access-control decisions).</p> </li> <li> <p>SAML is built upon a number of existing standards: like, XML, XML Schema (XSD), XML Signature, XML Encryption, HTTP, SOAP.</p> </li> <li> <p>SAML start from Jan 2001. It is old.</p> </li> </ul> <h2 id="two-common-usage-scenarios-for-saml">Two common usage scenarios for SAML.</h2> <ul> <li>IdP-initiated SSO(this is not popular one),</li> <li>SP-initiated SSO.</li> </ul> <h1 id="idp-initiated-sso-with-saml-authentication">IdP-initiated SSO with SAML Authentication</h1> <p>In this scenario, users first log in to the IdP system, which presents an application catalog. This catalog will contain visual icons of all the internal and external applications that the company has configured SSO for and that the user has privileges to access. When the user clicks on one of the images, the SAML flow is as follows:</p> <ol> <li>The SAML IdP takes the user’s identity, along with any other attributes that the two sides have agreed to communicate.</li> <li>It builds an XML-based SAML assertion.</li> <li>It signs the assertion with the private key of a public/private keypair that was exchanged between the IdP and SP when the SSO partnership was configured.</li> <li>It then either sends the assertion to the SP via the user’s browser or sends a reference to the assertion that the SP can use to securely retrieve the assertion.</li> </ol> <p>Once the SP has received the SAML assertion, it validates the signature using the public key in order to ensure the SAML assertion really came from its trusted IdP and that none of the values in the assertion have been modified. The SP can then extract the identity of the user from the SAML assertion along with any other attributes it needs. At this point, the user is on the service provider’s landing page, just as though they had logged into the site manually.</p> <h1 id="sp-initiated-sso-with-saml-authentication">SP-initiated SSO with SAML Authentication</h1> <p>SP-initiated SSO starts when a user tries to access a resource at the service provider, but hasn’t yet authenticated to the SP. A user may have gone directly to the website or may have saved a link to a specific resource at the SP. Once the SP sees that the user doesn’t have an active session, it will redirect them to the IdP to be authenticated. The IdP will authenticate the user, create the assertion and redirect the user back to the SP just as in the IdP-initiated use case, with the addition that it will also send back the URL of the resource that the user was initially trying to access, if it was provided by the SP.</p> <p>A few common ways the SP can determine which IDP to redirect the user to are:</p> <ol> <li>The SP may ask the user for their email address and use the domain of the email, such as bill@pingidentity.com, to determine which IdP to use.</li> <li>The SP may display a list of IdPs it supports and ask the user to choose the appropriate one.</li> <li>The resource URL may be specific to one IdP.</li> <li>The SP may have placed a cookie containing IdP information in the user’s browser the first time the user successfully signed on from the IDP and will use this information on subsequent accesses.</li> </ol> <p>Once the SP has received the SAML assertion, it validates the signature using the public key in order to ensure the SAML assertion really came from its trusted IdP and that none of the values in the assertion have been modified. The SP can then extract the identity of the user from the SAML assertion along with any other attributes it needs. At this point, the user is on the service provider’s landing page, just as though they had logged into the site manually.</p>]]></content><author><name></name></author><category term="Auth"/><category term="SAML"/><category term="authentication"/><category term="authorization"/><summary type="html"><![CDATA[In Short]]></summary></entry><entry><title type="html">OAuth vs. OpenID</title><link href="https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID/" rel="alternate" type="text/html" title="OAuth vs. OpenID"/><published>2020-08-27T00:00:00+00:00</published><updated>2020-08-27T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OAuthvs.OpenID/"><![CDATA[<ul> <li>OAuth is used in access authorization while OpenID are used in user authentication.</li> </ul> <h2 id="oauth-does-have-in-common-with-openid">OAuth does have in common with OpenID</h2> <ul> <li>They are open web standards.</li> <li>They both celebrate decentralisation.</li> <li>They both involve browser redirects from the website you’re trying to use - the “consumer” website - to a distinct “provider” website, and back again. Meanwhile, those websites talk to each other behind the scenes to verify what just happened.</li> <li>The user can actively manage the provider website</li> </ul> <h2 id="mainly-different-as-in-they-let-you-do-different-things">Mainly different as in “they let you do different things”</h2> <ul> <li>OpenID gives you one login for multiple sites. Each time you need to log into Zooomr - a site using OpenID - you will be redirected to your OpenID site where you login</li> <li> <p>OAuth lets you authorise one website - the consumer - to access your data from another website - the provider. With OAuth, you still need to log in the provider. How the provider decides you’re logged in is completely orthogonal to OAuth. Maybe username, password, even maybe OpenID.</p> </li> <li>With OpenID, there is no suggestion of two web apps sharing your data. Except some profile details. However, this is data of a generic, non-application-specific, nature.</li> <li>With OAuth, any information you hold on any website can be shared with another website. You could share your GMail with a clever consumer that automatically tags items by inspecting the content, if GMail was an OpenAuth consumer.</li> </ul> <h2 id="their-scenario">Their scenario</h2> <h1 id="the-scenario-for-openid">the scenario for OpenID:</h1> <ul> <li>User wants to access his account on example.com</li> <li>example.com (the “Relying Party” in OpenID lingo) asks the user for his OpenID</li> <li>User enters his OpenID</li> <li>example.com redirects the user to his OpenID provider</li> <li>User authenticates himself to the OpenID provider</li> <li>OpenID provider redirects the user back to example.com</li> <li>example.com allows the user to access his account</li> </ul> <h1 id="the-scenario-for-oauth">the scenario for OAuth:</h1> <ul> <li>User is on example.com and wants to import his contacts from mycontacts.com</li> <li>example.com (the “Consumer” in OAuth lingo) redirects the user to mycontacts.com (the “Service Provider”)</li> <li>User authenticates himself to mycontacts.com (which can happen by using OpenID)</li> <li>mycontacts.com asks the user whether he wants to authorize example.com to access his contacts</li> <li>User makes his choice</li> <li>mycontacts.com redirects the user back to example.com</li> <li>example.com retrieves the contacts from mycontacts.com</li> <li>example.com informs the user that the import was successful</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OAuth"/><category term="OpenID"/><category term="authorization"/><category term="authentication"/><summary type="html"><![CDATA[OAuth is used in access authorization while OpenID are used in user authentication.]]></summary></entry><entry><title type="html">OIDC Main Points</title><link href="https://benwzj.github.io/me/blog/2020/OIDC/" rel="alternate" type="text/html" title="OIDC Main Points"/><published>2020-08-24T00:00:00+00:00</published><updated>2020-08-24T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OIDC</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OIDC/"><![CDATA[<h2 id="what-is-oidc">What is OIDC</h2> <ul> <li>OpenID Connect (OIDC) provides an authentication layer atop OAuth 2.0.</li> <li>It simplifies the way to verify the identity of users based on the authentication performed by an Authorization Server and to obtain user profile information in an interoperable and REST-like manner.</li> <li>It enables application and website developers to launch sign-in flows and receive verifiable assertions about users across Web-based, mobile, and JavaScript clients.</li> <li>Simply saying, it adds an additional token called an <strong>ID token</strong>.</li> <li>OpenID Connect also standardizes areas that OAuth 2.0 leaves up to choice, such as scopes, endpoint discovery, and dynamic registration of clients.</li> <li>It addresses the lack of an authentication mechanism in OAuth, which is a weakness when it comes to authorizing sensitive transactions such as payments.</li> <li>OIDC is just a special, simplified case of OAuth, not a replacement. It uses the same terminology and concepts.</li> </ul> <h2 id="flow">Flow</h2> <ul> <li>A typical OpenID Connect workflow involves three parties, namely, the relying party (RP), the end user and the identity provider(IdP). The client, or the Relying Party, sends the end user to the identity provider, where the end user authenticates the identity and authorizes access to the client.</li> <li>The IdP sends an authorization code to the client, which then uses it to request <strong>ID token</strong> and uauslly access token from the IdP. Once the client gets the tokens, it is allowed it to perform an action on behalf of the end user.</li> </ul> <h2 id="caveat">caveat</h2> <ul> <li>OpenID Connect uses a signed and cryptographically verifiable JSON Web Token to ensure that the access and ID tokens are not tampered with during the exchange of information between parties.</li> <li>A client must <strong>be registered with</strong> the OP.</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OIDC"/><category term="authorization"/><category term="authentication"/><summary type="html"><![CDATA[What is OIDC]]></summary></entry><entry><title type="html">OAuth Main Points</title><link href="https://benwzj.github.io/me/blog/2020/OAuth/" rel="alternate" type="text/html" title="OAuth Main Points"/><published>2020-08-22T00:00:00+00:00</published><updated>2020-08-22T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OAuth</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OAuth/"><![CDATA[<h1 id="in-short">In Short</h1> <ul> <li>OAuth(Open Authorization) is a standard for authorization that grants access to Other resources via access tokens.</li> <li>OAuth is for access delegation, commonly used as a way for Internet users to grant websites or applications access to their information on other websites but without giving them the passwords.</li> <li>This mechanism is used by big companies such as Amazon, Google, Facebook, Microsoft, and Twitter to permit users to share information about their accounts with third-party applications or websites.</li> </ul> <h1 id="why-oauth-show-up">Why OAuth show up</h1> <ul> <li>OAuth began in November 2006 when Blaine Cook was developing the Twitter OpenID implementation. And they concluded that there were no open standards for API access delegation.</li> </ul> <h1 id="oauth-is-not-for-authentication">OAuth is not for authentication</h1> <ul> <li>The OAuth 2.0 Framework describes overarching patterns for granting authorization but does not define how to actually perform authentication.</li> <li>OAuth is an authorization protocol, rather than an authentication protocol. Using OAuth on its own as an authentication method may be referred to as pseudo-authentication</li> <li> <p>This is what pseudo-authentication means:</p> <figure> <picture> <img src="/me/assets/img/OpenIDvs.Pseudo-AuthenticationusingOAuth.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </li> </ul> <p>&lt;/figure&gt;</p> <ul> <li> <p>For example, when an App, like SelfPrint, sign in using <strong>Social sign-in</strong>, like Google, It is using OAuth. It is Pseudo-Authentication. Gmail provides the tokens that allow SelfPrint to access your Photos.</p> </li> <li> <p>Now, OpenID Connect (OIDC) extends the OAuth 2.0 authorization protocol for use as an additional authentication protocol. You can use OIDC to enable single sign-on (SSO) between your OAuth-enabled applications by using a security token called an ID token.</p> </li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OAuth"/><category term="authorization"/><summary type="html"><![CDATA[In Short]]></summary></entry><entry><title type="html">OpenID Main Points</title><link href="https://benwzj.github.io/me/blog/2020/OpenID/" rel="alternate" type="text/html" title="OpenID Main Points"/><published>2020-08-21T00:00:00+00:00</published><updated>2020-08-21T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2020/OpenID</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2020/OpenID/"><![CDATA[<h1 id="openid-main-points">OpenID Main Points</h1> <ul> <li>OpenID is based on a simple idea: a user authenticates with an identity provider (IDP), who then provides the user with a unique identifier (called an OpenID). This identifier can then be used to authenticate the user with any website that supports OpenID.</li> <li>The OpenID standard provides a framework for the communication that must take place between the identity provider and the OpenID acceptor(relying parties)</li> <li>OpenID is decentralized authentication protocol.</li> <li>Main purpose is allowing users to authenticate with multiple websites using a single set of credentials, eliminating the need for separate usernames and passwords for each website.</li> </ul> <h1 id="how-to-use-openid">How to use OpenID</h1> <ul> <li>Users need to create accounts by selecting an OpenID identity provider and then use those accounts to sign onto any website that accepts OpenID authentication.</li> </ul> <h1 id="openid-is-not-for-authorization-it-is-just-used-for-identity-authentication-but-why">OpenID is NOT for authorization, It is just used for Identity authentication. But why?</h1> <ul> <li>Because it don’t want to. Authorization is left to relying parties.</li> </ul>]]></content><author><name></name></author><category term="Auth"/><category term="OpenID"/><category term="authentication"/><summary type="html"><![CDATA[OpenID Main Points]]></summary></entry><entry><title type="html">Introduce Jekyll and GitHub Pages</title><link href="https://benwzj.github.io/me/blog/2019/JekyllGitHubPages/" rel="alternate" type="text/html" title="Introduce Jekyll and GitHub Pages"/><published>2019-12-12T00:00:00+00:00</published><updated>2019-12-12T00:00:00+00:00</updated><id>https://benwzj.github.io/me/blog/2019/JekyllGitHubPages</id><content type="html" xml:base="https://benwzj.github.io/me/blog/2019/JekyllGitHubPages/"><![CDATA[<h2 id="what-is-jekyll"><strong>What is Jekyll</strong></h2> <p>In short, Jekyll</p> <ul> <li>is ruby software</li> <li>is a static website generator software</li> <li>can transfer some kind of files(like md, html, sass etc.) into static website files(like html, css, etc.)</li> <li>automtically update your website when you update your files (cool thing!)</li> <li>can run in your own computor or GitHub pages</li> </ul> <h2 id="jekyll-main-points"><strong>Jekyll Main Points</strong></h2> <ul> <li>Use Front Matter</li> <li>Use Liquid templating language</li> <li>Support Markdown which is less verbose than raw HTML</li> <li>Support Layouts which are templates that can be used by any page in your site and wrap around page content. They are stored in a directory called <code class="language-plaintext highlighter-rouge">_layouts</code></li> </ul> <h2 id="jekyll-file-system"><strong>Jekyll file system</strong></h2> <h3 id="general-rules">General Rules:</h3> <ul> <li>SCSS (Sass) files into CSS (.scss -&gt; .css), and Markdown into HTML (.md -&gt; .html)</li> <li>The “distribution” folder is called _site. This is what the static site generator generates! Never place any files in that folder; they will be deleted and overwritten.</li> <li>The _sass folder is for Sass partials. Every file in here should begin with an underscore, and it will compile into the css folder.</li> <li>Any file or folder placed into the main directory will compile into the _site directory as-is.</li> </ul> <h3 id="configuration">Configuration</h3> <ul> <li>In the main directory, there’s a file called <strong><em>_config.yml</em></strong>.</li> <li>This file contain all configuratin for the website.</li> <li>Like <strong>url</strong>, <strong>baseurl</strong> etc.</li> </ul> <h3 id="customizing-jekyll-theme">Customizing Jekyll Theme</h3> <ul> <li><strong>_includes</strong> are files that should show up on every page - header, footer, etc.</li> <li><strong>_layouts</strong>: The layout that content will conform to.</li> <li><strong>_pages</strong>: It can contain all markdown files here so the main directory stays clean.</li> <li><strong>_posts</strong> : This is where blogs go to.</li> <li><strong>blog</strong> folder: contain an index.html. the main blog page that will contain all posts.</li> <li><strong>_sass</strong> the sass partials</li> </ul> <hr/> <p><br/></p> <h2 id="front-matter"><strong>Front Matter</strong></h2> <p>The front matter is the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">page</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">PAGE-TITLE"</span>
<span class="na">permalink</span><span class="pi">:</span> <span class="s">/URL-PATH</span>
<span class="nn">---</span>
</code></pre></div></div> <p>or</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">POST-TITLE"</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">YYYY-MM-DD hh:mm:ss -0000</span>
<span class="na">categories</span><span class="pi">:</span> <span class="s">CATEGORY-1 CATEGORY-2</span>
<span class="nn">---</span>
</code></pre></div></div> <p>Any file that contains a YAML front matter block will be processed by Jekyll as a special file.</p> <h2 id="liquid"><strong>Liquid</strong></h2> <p>Liquid is a templating language which has three main components:</p> <ul> <li>objects</li> <li>tags</li> <li>filters</li> </ul> <h3 id="objects">Objects</h3> <p>Objects tell Liquid to output predefined variables as content on a page. Use double curly braces for objects. For example, <code class="language-plaintext highlighter-rouge">{ { page.title } }</code> displays the <code class="language-plaintext highlighter-rouge">page.title</code> variable.</p> <h3 id="tags">Tags</h3> <p>Tags define the logic and control flow for templates. Use curly braces and percent signs for tags. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ % if page.show_sidebar % }
  &lt;div class="sidebar"&gt;
    sidebar content
  &lt;/div&gt;
{ % endif % }
</code></pre></div></div> <h3 id="filters">Filters</h3> <p>Filters change the output of a Liquid object. They are used within an output and are separated by a <code class="language-plaintext highlighter-rouge">|</code> For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{ { "hi" | capitalize } }
</code></pre></div></div> <hr/> <p><br/></p> <h2 id="github-pages"><strong>GitHub Pages</strong></h2> <p>GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.</p> <p>It support User site(http(s)://<username>.github.io) or project site (http(s)://<username>.github.io/<repository>). You can publish your site when changes are pushed to a specific branch, GitHub Pages will use Jekyll to build your site by default. GitHub Pages does not support server-side languages such as PHP, Ruby, or Pythoy.</repository></username></username></p> <hr/> <p><br/></p> <h2 id="setup-github-pages-steps"><strong>Setup GitHub Pages Steps</strong></h2> <h3>Step 1: Enable GitHub Pages</h3> <ol> <li>Open a new browser tab, and work on the steps in your second tab while you read the instructions in this tab.</li> <li>Under your repository name, click <strong>Settings</strong>.</li> <li>Click <strong>Pages</strong> in the <strong>Code and automation</strong> section.</li> <li>Ensure “Deploy from a branch” is selected from the <strong>Source</strong> drop-down menu, and then select <code class="language-plaintext highlighter-rouge">main</code> from the <strong>Branch</strong> drop-down menu.</li> <li>Click the <strong>Save</strong> button.</li> <li>Wait about <em>one minute</em>, then refresh this page for the next step. <blockquote> <p>Turning on GitHub Pages creates a deployment of your repository. GitHub Actions may take up to a minute to respond while waiting for the deployment. Future steps will be about 20 seconds; this step is slower. <strong>Note</strong>: In the <strong>Pages</strong> of <strong>Settings</strong>, the <strong>Visit site</strong> button will appear at the top. Click the button to see your GitHub Pages site.</p> </blockquote> </li> </ol> <h3>Step 2: Configure your site</h3> <ol> <li>Browse to the <code class="language-plaintext highlighter-rouge">_config.yml</code> file in the <code class="language-plaintext highlighter-rouge">my-pages</code> branch.</li> <li>In the upper right corner, open the file editor.</li> <li>Add a <code class="language-plaintext highlighter-rouge">theme:</code> set to <strong>minima</strong> so it shows in the <code class="language-plaintext highlighter-rouge">_config.yml</code> file as below: <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span> <span class="s">minima</span>
</code></pre></div> </div> </li> <li>(optional) You can modify the other configuration variables such as <code class="language-plaintext highlighter-rouge">title:</code>, <code class="language-plaintext highlighter-rouge">author:</code>, and <code class="language-plaintext highlighter-rouge">description:</code> to further customize your site.</li> <li>Commit your changes.</li> <li>(optional) Create a pull request to view all the changes you’ll make throughout this course. Click the <strong>Pull Requests</strong> tab, click <strong>New pull request</strong>, set <code class="language-plaintext highlighter-rouge">base: main</code> and <code class="language-plaintext highlighter-rouge">compare:my-pages</code>.</li> <li>Wait about 20 seconds then refresh this page for the next step.</li> </ol> <h3>Step 3: Customize your homepage</h3> <p><em>Nice work setting the theme! :sparkles:</em></p> <p>You can customize your homepage by adding content to either an <code class="language-plaintext highlighter-rouge">index.md</code> file or the <code class="language-plaintext highlighter-rouge">README.md</code> file. GitHub Pages first looks for an <code class="language-plaintext highlighter-rouge">index.md</code> file. Your repository has an <code class="language-plaintext highlighter-rouge">index.md</code> file so we can update it to include your personalized content.</p> <ol> <li>Browse to the <code class="language-plaintext highlighter-rouge">index.md</code> file in the <code class="language-plaintext highlighter-rouge">my-pages</code> branch.</li> <li>In the upper right corner, open the file editor.</li> <li>Type the content you want on your homepage. You can use Markdown formatting on this page.</li> <li>(optional) You can also modify <code class="language-plaintext highlighter-rouge">title:</code> or just ignore it for now. We’ll discuss it in the next step.</li> <li>Commit your changes to the <code class="language-plaintext highlighter-rouge">my-pages</code> branch.</li> <li>Wait about 20 seconds then refresh this page for the next step.</li> </ol> <h3>Step 4: Create a blog post</h3> <p><strong>What is <em>frontmatter</em>?</strong>: The syntax Jekyll files use is called YAML frontmatter. It goes at the top of your file and looks something like this:</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Welcome</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">my</span><span class="nv"> </span><span class="s">blog"</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2019-01-20</span>
<span class="nn">---</span>
</code></pre></div></div> <ol> <li>Browse to the <code class="language-plaintext highlighter-rouge">my-pages</code> branch.</li> <li>Click the <code class="language-plaintext highlighter-rouge">Add file</code> dropdown menu and then on <code class="language-plaintext highlighter-rouge">Create new file</code>.</li> <li>Name the file <code class="language-plaintext highlighter-rouge">_posts/YYYY-MM-DD-title.md</code>.</li> <li>Replace the <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> with today’s date, and change the <code class="language-plaintext highlighter-rouge">title</code> of your first blog post if you’d like.</li> <li>Type the following content at the top of your blog post: <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s2">"</span><span class="s">YOUR-TITLE"</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">YYYY-MM-DD</span>
<span class="nn">---</span>
</code></pre></div> </div> </li> <li>Replace <code class="language-plaintext highlighter-rouge">YOUR-TITLE</code> with the title for your blog post.</li> <li>Replace <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> with today’s date.</li> <li>Type a quick draft of your blog post. Remember, you can always edit it later.</li> <li>Commit your changes to your branch.</li> <li>Wait about 20 seconds then refresh this page for the next step.</li> </ol> <h3>Step 5: Merge your pull request</h3> <ol> <li>Merge your changes from <code class="language-plaintext highlighter-rouge">my-pages</code> into <code class="language-plaintext highlighter-rouge">main</code>. If you created the pull request in step 2, just open that PR and click on <strong>Merge pull request</strong>. If you did not create the pull request earlier, you can do it now by following the instructions in step 2.</li> <li>(optional) Delete the branch <code class="language-plaintext highlighter-rouge">my-pages</code>.</li> <li>Wait about 20 seconds then refresh this page for the next step.</li> </ol> <hr/> <p><br/></p> <h2 id="fqa"><strong>FQA</strong></h2> <h3 id="how-to-update-posts">How to update posts</h3> <ul> <li>All posts is located in <code class="language-plaintext highlighter-rouge">_posts</code> directory. You can add and update posts from there.</li> <li>Jekyll requires blog post files to be named according to the following format:</li> </ul> <p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p> <p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file.</p> <h3 id="baseurl-issue">baseurl issue</h3> <p>When you setup github page in github, it sets this baseurl to your repo name, for example ‘blogs’, if your repo is ‘blogs’. You can set this environment variable in _config.yml file.</p> <div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">baseurl</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/blogs"</span> <span class="c1"># the subpath of your site</span>
</code></pre></div></div> <p>Seting up this will be helpful if you want to test the website in your local machine.</p>]]></content><author><name></name></author><category term="Website"/><category term="Jekyll"/><summary type="html"><![CDATA[What is Jekyll]]></summary></entry></feed>